<?xml version="1.0" encoding="UTF-8"?>
<list><Code><annotation>org.tangram.example.Topic</annotation><mimeType>text/html</mimeType><code>&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;$self.title&lt;/title&gt;
  &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8" /&gt;
  &lt;meta name="viewport" content="width=320, initial-scale=0.95" /&gt;  
  &lt;meta name="keywords" content="$self.keywords" /&gt;
  &lt;meta name="language" content="de" /&gt;
#foreach($css in $self.rootTopic.css)
  #include($css 'cssimport')
  
#end
  &lt;style type="text/css" media="only screen and (min-width: 620px)"&gt;
    .box { height: 300px; }
  &lt;/style&gt;
  &lt;style type="text/css" media="only screen and (max-width: 480px)"&gt;
    body { padding: 0; }
  &lt;/style&gt;
#foreach($js in $self.rootTopic.js)
  #include($js 'jsimport')
  
#end
&lt;/head&gt;
&lt;body&gt;
  &lt;div class="header"&gt;&lt;p&gt;&lt;a #link($self.rootTopic true)&gt;$self.rootTopic.shortTitle&lt;/a&gt; - $self.title&lt;/p&gt;&lt;/div&gt;
&lt;div class="infobox"&gt;Â© 2014 - &lt;a href="http://github.com/mgoellnitz/tangram-examples/"&gt;Tangram Examples&lt;/a&gt;&lt;/div&gt;
  &lt;div class="box" style="clear: both; width: 100%; height: 0px;"&gt;&lt;/div&gt;
#foreach($box in $self.subTopics)
  &lt;div class="box"&gt;&lt;h3&gt;&lt;a #link($box true)&gt;$box.title&lt;/a&gt;&lt;/h3&gt;
    #include($box.teaser)
    &lt;ul&gt;
    #foreach($b in $box.subTopics)
      &lt;li&gt;&lt;a #link($b true)&gt;$b.title&lt;/a&gt;&lt;/li&gt;
    #end
    &lt;/ul&gt;
  &lt;/div&gt;
#end
  &lt;hr style="clear: both;"/&gt;
  #include($self 'editor')
&lt;/body&gt;
&lt;/html&gt;
</code></Code><Code><annotation>org.tangram.example.Linkable.name</annotation><mimeType>text/html</mimeType><code>$self.class.simpleName: #if($self.title)$self.title#else$self.id#end</code></Code><Code><annotation>screen</annotation><mimeType>text/css</mimeType><code>body {
  background-color: #405060;
  color: #607080;
  font-family: Arial, Helvetica;
  padding-top: 5px;
  padding-bottom: 5px;
  padding-left: 10px;
  padding-right: 10px;
  vertical-align: bottom;
}

div {
  margin: 0;
  padding: 0;
}

p {
  margin: 0;
  padding: 0;
}

a {
  text-decoration: none;
  color: #FFFFFF;
}

a:link { }

a:visited { }

a:hover { color: #909090; }

a:focus { color: #0000FF; }

a:active { color: #FF0000; }

.header a {
  color: #D0C080;
}


h1 { font-size: 14pt; }

.header {
  background-color: #FFFFFF;
  color: #D0C080;
  height: 60px;
  font-size: 20pt;
  font-weight: bold;
  text-align: right;
  vertical-align: bottom;
  padding: 10px;
}

.infobox {
  background-color: #D0C080;
  height: 24px;
  padding-top: 5px;
  padding-left: 5px;
  margin: 0;
}

.box {
  padding: 5px;
  width: 300px;
  float: left;
  color: #909090;
}

</code></Code><Code><annotation>org.tangram.example.Topic</annotation><mimeType>application/x-groovy</mimeType><code>package org.tangram.example.links;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.tangram.Constants;
import org.tangram.content.Content;
import org.tangram.content.BeanFactory;
import org.tangram.content.BeanFactoryAware;
import org.tangram.view.Utils;
import org.tangram.view.TargetDescriptor;
import org.tangram.link.Link;
import org.tangram.link.LinkHandler;

import org.tangram.example.RootTopic;
import org.tangram.example.Linkable;
import org.tangram.example.Topic;
import org.tangram.example.ImageData;

public class ExampleLinkScheme implements LinkHandler, BeanFactoryAware {
  
  private static Logger log = LoggerFactory.getLogger(ExampleLinkScheme.class);

  private BeanFactory beanFactory;
  
  
  public void setBeanFactory(BeanFactory factory) {
    beanFactory = factory;
  } // setBeanFactory()
  
  
  public Set&lt;String&gt; getCustomViews() {
    Set &lt;String&gt; result = new HashSet&lt;String&gt;();
    result.add(Constants.DEFAULT_VIEW);
    return result;
  } // getCustomViews()


  public Link createLink(HttpServletRequest request, HttpServletResponse response, Object bean, String action, String view) {    
        Link result = null;
        if ((action==null)&amp;&amp;(view==null)) {
            if (bean instanceof RootTopic) {
                result = new Link();
                result.setUrl("/");
            } else {
                if ((bean instanceof Topic)||(bean instanceof ImageData)) {
                    String title = "-";
                    if (bean instanceof Linkable) {
                        try {
                            title = Utils.urlize(((Linkable)bean).getTitle());
                        } catch (UnsupportedEncodingException uee) {
                            log.error("createLink()", uee);
                        } // try
                    } // if
                    String url = "/"+title+"/"+bean.id;
                    if (bean instanceof Topic) {
                      url = url+".html";
                    } // if
                    result = new Link();
                    // result.addHandler("onclick", "pageload()");
                    result.setUrl(url);
                } // if
            } // if
        } // if
        return result;
  } // createLink()

    
  private TargetDescriptor rootDescriptor = null;;
  
  
  public TargetDescriptor parseLink(String url, HttpServletResponse response) {
    TargetDescriptor result = null;
    if (url.equals("/")) {
        try {
            if (rootDescriptor==null) {
                List&lt;RootTopic&gt; rs = beanFactory.listBeans(RootTopic.class, null);
                RootTopic root = null;
                if (rs.size()==1) {
                    root = rs.get(0);
                } else {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "Have "+rs.size()+" RootTopics in data store");
                } // if
                rootDescriptor = new TargetDescriptor(root, null, null);
            } // if
            result = rootDescriptor;
        } catch (Exception e) {
            result = new TargetDescriptor(e, null, null);
        } // try/catch
      } else {
          Object bean  = null;
          String[] elements = url.split("/");
          String id = null;
          for (String element : elements) {
            if (element.indexOf(":") &gt; 0) {
              int idx = element.indexOf(".");
              if (idx &gt;= 0) {
                element = element.substring(0, idx);
              } // if
              id = element;
              bean = beanFactory.getBean(element);
            } // if
          } // for
          if (bean != null) {
              result = new TargetDescriptor(bean, null, null);
          } else {
              response.sendError(HttpServletResponse.SC_NOT_FOUND, "no content with id "+id+" in repository.");
          } // if
      } // if
      return result;
  } // parseLink()
    
} // ExampleLinkScheme
</code></Code>
<Topic><title>Java Data Object</title><shortTitle>JDO</shortTitle><teaser/></Topic>
<Topic><title>Java Persistence API</title><shortTitle>JPA</shortTitle><teaser/></Topic>
<Topic><title>EBean</title><shortTitle>EBean</shortTitle><teaser/></Topic>
<Topic><title>Model</title><shortTitle>Model</shortTitle><teaser/><subTopics><Topic reference="../../../Topic"/><Topic reference="../../../Topic[2]"/><Topic reference="../../../Topic[3]"/></subTopics></Topic>
<Topic><title>Java Server Pages</title><shortTitle>JSP</shortTitle><teaser/></Topic>
<Topic><title>Apache Velocity</title><shortTitle>Velocity</shortTitle><keywords>View, Velocity, Dynamic, Repository</keywords><teaser>&lt;p&gt;Apache Velocity views are stored in a default model class &amp;quot;Code&amp;quot; and thus in the so called repository.&lt;/p&gt;
</teaser></Topic>
<Topic><title>View</title><shortTitle>View</shortTitle><teaser>&lt;p&gt;Tangram contains pluggable, object oriented viewing options with two prominent defaults.&lt;/p&gt;
</teaser><subTopics><Topic reference="../../../Topic[5]"/><Topic reference="../../../Topic[6]"/></subTopics></Topic>
<Topic><title>Spring Controller</title><shortTitle>Spring</shortTitle><teaser/></Topic>
<Topic><title>Tangram Link Handlers</title><shortTitle>Generic Handlers</shortTitle><teaser/></Topic>
<Topic><title>Servlet</title><shortTitle>Servlet</shortTitle><subTopics/><elements/><teaser/><relatedContainers/></Topic>
<Topic><title>Controller</title><shortTitle>Controller</shortTitle><teaser/><subTopics><Topic reference="../../../Topic[8]"/><Topic reference="../../../Topic[9]"/><Topic reference="../../../Topic[10]"/></subTopics></Topic>
<RootTopic><title>Home</title><shortTitle>Tangram</shortTitle><keywords>Tangram Example Website</keywords><subTopics><Topic reference="../../../Topic[4]"/><Topic reference="../../../Topic[7]"/><Topic reference="../../../Topic[11]"/></subTopics><elements/><teaser/><relatedContainers/><bottomLinks/><css><Code reference="../../../Code[3]"/></css><js/></RootTopic></list>