defaultTasks 'clean', 'build'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'maven'

sourceCompatibility = 1.6
targetCompatibility = 1.6

tangram_version = '0.6'

servlet_spec = "2.5"
jsp_spec = "2.0"

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'

repositories {
  mavenLocal()
  // most of the usual stuff
  maven { url "http://repo1.maven.org/maven2" }
  // needed for latest spring framework and security versions
  maven { url "http://repository.springsource.com/maven/bundles/release" }
  // needed for latest datanucleus versions
  maven { url "http://www.datanucleus.org/downloads/maven2" }
}

compileJava.options.compilerArgs = ['-processor', 'org.datanucleus.enhancer.EnhancerProcessor'] 

jar.enabled = true 

configurations {
  libs 
  webapp
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:gae-webapp:$tangram_version"
  
  providedCompile "org.datanucleus:datanucleus-enhancer:1.1.4"
  
  providedCompile "javax.servlet:servlet-api:$servlet_spec"
  providedCompile "javax.servlet:jsp-api:$jsp_spec"
  compile "tangram:gae:$tangram_version"
}

jar.doFirst {
  // JDO Enhancing is not really done when we start this - sorry
  Thread.currentThread().sleep(3000)
}

war.doFirst {
  // Strange way of overwriting things
  if (configurations.webapp.dependencies.size() == 1) {
    archiveFileName = configurations.webapp.asPath
    idx = archiveFileName.indexOf(';')
    if (idx >= 0) {
      archiveFileName = archiveFileName.substring(0, idx)
    } // if
    println "unzipping $archiveFileName"
    ant.unzip(src: archiveFileName, dest: "$buildDir/target")  
  } // if
  
  // TODO: YUICompressor - see base system
  copy {
    from 'src/main/webapp'
    into "$buildDir/target"
    include '**/**'
  }
  
  into ('') {
    from "$buildDir/target"
    exclude 'WEB-INF/lib/**'
  }
}

war {
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  excludes = [ "classes/**" ]
}

war.doLast {
  ant.unzip(src: war.archivePath, dest: "$buildDir/war")
}
