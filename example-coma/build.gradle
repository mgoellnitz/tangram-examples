/**
 * 
 * Copyright (C) 2011-2014 Martin Goellnitz
 * 
 * This work is licensed under the Creative Commons Attribution 3.0 
 * Unported License. To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to 
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, 
 * California, 94041, USA.
 * 
 */
import org.gradle.api.file.FileCopyDetails
import org.gradle.api.file.FileTree
import org.gradle.api.file.RelativePath
import de.undercouch.gradle.tasks.download.Download

defaultTasks 'clean', 'build'

def tangram_version = '0.9'

// Switch to have the options in one example project - optional external override
def tangram_backend = project.hasProperty('backend') ? "$backend" : 'dinistiq' // spring or dinistiq

buildscript {
  repositories {
    mavenCentral()
    maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  }
  dependencies {
    classpath 'tangram:gradle-plugin:0.9'
    classpath 'de.undercouch:gradle-download-task:1.0'
  }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'tangram'
apply plugin: 'download-task'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'
jar.enabled = true 

repositories {
  // most of the usual stuff
  mavenCentral()
  // tangram snapshots
  maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  // the tangram stuff
  maven { url "http://my-amor.appspot.com/repository" }
}

configurations {
  libs 
  webapp
  // this is only relevant for spring scenarios since spring still uses jcl
  all*.exclude module: 'commons-logging'
}

artifacts {
  archives war
  libs jar
}

sourceSets {
  main {
    java {
      srcDir "src/main/java"
      srcDir "src/main/java-$tangram_backend"
    }
  }
}

dependencies {
  webapp "tangram:tangram-coma:$tangram_version:war@war"
  compile "tangram:tangram-coma:$tangram_version"
  
  compile "tangram:tangram-${tangram_backend}:$tangram_version"
  
  runtime "org.slf4j:slf4j-log4j12:$versions.slf4j"  
  runtime "mysql:mysql-connector-java:5.1.31"
  
  testCompile "junit:junit:$versions.junit"
  
  // your container will have this for you
  providedCompile "$versions.servlet_api"
  providedCompile "$versions.jsp_api"
}

jar {
  if (tangram_backend == 'spring') {
    excludes = [ "dinistiq/**" ]
  }
}

war.doFirst { overlayWebapp(war) }

/**
 *  coremediaUsername and coremediaPassword must be specified in your personal
 *  gradle.properties file in your ${GRADLE_USER_HOME}. Ask the friendly
 *  coremedia support staff for details.
 */
war {
  archiveName = "${project.name}-${tangram_backend}.war"
  webXml = file("src/main/webapp/WEB-INF/web-${tangram_backend}.xml") 
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  if (tangram_backend == 'spring') {
    excludes = [ "classes/**", "WEB-INF/web*.xml", "WEB-INF/shiro.ini", "shiro/**" ]
  } else {
    excludes = [ "classes/**", "WEB-INF/web*.xml", "WEB-INF/tangram/**", "WEB-INF/security-*.xml" ]
  }
  
  def examplesFile = new File("$projectDir/cap-examples.jar")
 
  if ((!examplesFile.exists()) && project.hasProperty("coremediaUsername")) {
    download {
      src 'https://releases.coremedia.com/cmv/16/cms/5.2.1456/cap-examples.jar'
      dest "$projectDir"
      onlyIfNewer true
      username coremediaUsername
      password coremediaPassword
    }
  } // if
  
  if (examplesFile.exists()) {
    FileTree cmexamples = zipTree("$projectDir/cap-examples.jar")
  
    // complicated stuff until http://issues.gradle.org/browse/GRADLE-3025 gets solved
    into('') {
      from cmexamples
      include 'cae/menusite/src/css/**'
      eachFile { FileCopyDetails fcp ->
        if (fcp.relativePath.pathString.startsWith('cae/menusite/src/css')) {
          def segments = fcp.relativePath.segments
          def pathsegments = segments[3..-1] as String[]
          fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
        } else {
          fcp.exclude()
        } // if
      } // eachFile
    } // into
    into('WEB-INF') {
      from cmexamples
      include 'cae/menusite/src/templates/**'
      eachFile { FileCopyDetails fcp ->
        if (fcp.relativePath.pathString.startsWith('WEB-INF/cae/menusite/src/templates')) {
          def segments = fcp.relativePath.segments
          def pathsegments = segments[0,4..-1] as String[]
          fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)
        } else {
          fcp.exclude()
        } // if
      } // eachFile
    } // into
  } // if
}

/** Optional step to debug things
war.doLast {
ant.unzip(src: war.archivePath, dest: "$buildDir/war")
}
 */

stopPort = 12390
httpPort = 12380

// For the users of a the legacy IDE Eclipse
// apply plugin: 'eclipse'
// Project specific default output directory
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
