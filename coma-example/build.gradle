/**
 * 
 * Copyright (C) 2011-2013 Martin Goellnitz
 * 
 * This work is licensed under the Creative Commons Attribution 3.0 
 * Unported License. To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to 
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, 
 * California, 94041, USA.
 * 
 */
defaultTasks 'clean', 'build'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'jetty'

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext.tangram_version = '0.8'

ext.servlet_spec = "2.5"
ext.jsp_spec = "2.0"

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'

repositories {
  // most of the usual stuff
  mavenCentral()
  // the tangram stuff
  maven { url "http://my-amor.appspot.com/repository" }
  // needed for latest spring framework and security versions
  maven { url "http://repository.springsource.com/maven/bundles/release" }
}

jar.enabled = true 

// Project specific default output directory
eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }

configurations {
  libs 
  webapp
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:tangram-coma:$tangram_version:war@war"

  compile "tangram:tangram-coma:$tangram_version"
  
  providedCompile "javax.servlet:servlet-api:$servlet_spec"
  providedCompile "javax.servlet:jsp-api:$jsp_spec"
  
  compile "postgresql:postgresql:8.4-702.jdbc4"
}

// TODO: this looks a little bit redundnant...
buildscript {
    repositories {
        mavenLocal()
  
        // most of the usual stuff
        mavenCentral()
    }

    dependencies {
        // TODO: how to use the yui_version variable above?
        classpath "com.yahoo.platform.yui:yuicompressor:2.4.6"
    }
}

class JavaScriptMinify extends FilterReader {

    Reader inputReader

    public JavaScriptMinify(Reader inputReader) {
        super(inputReader);
        if (inputReader!=null) {
            try {
                com.yahoo.platform.yui.compressor.JavaScriptCompressor jsc = new com.yahoo.platform.yui.compressor.JavaScriptCompressor(inputReader, null);
                StringWriter out = new StringWriter();
                jsc.compress(out, 80, false, false, false, false);
                out.close();
                super.in = new StringReader(out.getBuffer().toString());
            } catch (Exception e) {
                ; // who cares
            } // try/catch
        } // if
    } // JavaScriptMinify()

} // JavaScriptMinify

class CSSMinify extends FilterReader {

    Reader inputReader

    public CSSMinify(Reader inputReader) {
        super(inputReader);
        if (inputReader!=null) {
            try {
                com.yahoo.platform.yui.compressor.CssCompressor csc = new com.yahoo.platform.yui.compressor.CssCompressor(inputReader);
                StringWriter out = new StringWriter();
                csc.compress(out, 0);
                out.close();
                super.in = new StringReader(out.getBuffer().toString());
            } catch (Exception e) {
                ; // who cares
            } // try/catch
        } // if
    } // CSSMinify()

} // CSSMinify

war.doFirst {
  // Strange way of overwriting things - it must be the first webapp dependency
  if (configurations.webapp.dependencies.size() > 0) {
    String archiveFileName = configurations.webapp.asPath
    int idx = archiveFileName.indexOf(';')
    if (idx >= 0) {
      archiveFileName = archiveFileName.substring(0, idx)
    } // if
    println "unzipping $archiveFileName"
    ant.unzip(src: archiveFileName, dest: "$buildDir/target")  
  } // if
  
  copy {
    from 'src/main/webapp'
    into "$buildDir/target"
    include '**/**'
    // exclude '**/*.js'
    exclude '**/*.css'
  }
  copy {
    from 'src/main/webapp'
    into "$buildDir/target"
    include '**/*.js'
    exclude 'editor/ckeditor/**'
    filter(JavaScriptMinify)
  }
  copy {
    from 'src/main/webapp'
    into "$buildDir/target"
    include '**/*.css'
    filter(CSSMinify)
  }
  
  into ('') {
    from "$buildDir/target"
    exclude 'WEB-INF/lib/**'
  }
}

war {
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  excludes = [ "classes/**" ]
}

war.doLast {
  ant.unzip(src: war.archivePath, dest: "$buildDir/war")
}

stopPort = 12390
httpPort = 12380
