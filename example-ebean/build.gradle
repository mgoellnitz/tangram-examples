/**
 *
 * Copyright (C) 2011-2015 Martin Goellnitz
 *
 * This work is licensed under the Creative Commons Attribution 3.0
 * Unported License. To view a copy of this license, visit
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View,
 * California, 94041, USA.
 *
 */
plugins {
  id "tangram.gradle.plugin" version "1.0.0"
}

def tangram_version = '1.0.0'

// Switch to have the options in one example project - optional external override
def tangram_backend = project.hasProperty('backend') ? "$backend" : 'guicy' // spring, dinistiq, guicy
// If you compile tangram yourself, you might want to try your local repo
def useLocalRepo = project.hasProperty('local')

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'tangram'

defaultTasks 'clean', 'build'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  if (useLocalRepo) {
    mavenLocal()
  }
  // Everything we use can be found here
  jcenter()
}

configurations {
  libs
  // this is only relevant for spring scenarios since spring still uses jcl
  all*.exclude module: 'commons-logging'
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:tangram-core:$tangram_version:war@war"
  compile "tangram:tangram-ebean:$tangram_version"

  runtime "tangram:tangram-${tangram_backend}:$tangram_version"

  // For Yahoo OpenID example
  compile "org.pac4j:pac4j-openid:$versions.pac4j"

  // turn on editor
  webapp "tangram:tangram-editor:$tangram_version:war@war"
  runtime "tangram:tangram-editor:$tangram_version"

  /* For the FTP Service
  runtime "tangram:tangram-ftp:$tangram_version"
   */

  /* dinistiq */
  if (tangram_backend == 'dinistiq') {
  }
  /* springframework */
  if (tangram_backend == 'spring') {
  }
  /* Google Guice */
  if (tangram_backend == 'guicy') {
    compile ("com.mycila.guice.extensions:mycila-guice-jsr250:$versions.mycila_guice") {
      exclude module: 'sisu-guice'
    }
    runtime "org.slf4j:jcl-over-slf4j:$versions.slf4j"
    // dummies for compile scope to keep IDEs calm about groovy scripts
    compile"tangram:tangram-${tangram_backend}:$tangram_version"
  }

  runtime "com.h2database:h2:1.3.174"
  runtime "org.slf4j:slf4j-log4j12:$versions.slf4j"

  testCompile "junit:junit:$versions.junit"

  // your container will have this for you
  providedCompile "$versions.servlet_api"
  providedCompile "$versions.jsp_api"
}

jar {
  if (tangram_backend == 'spring') {
    excludes = [ 'dinistiq/**', 'guicy/**' ]
  }
  if (tangram_backend == 'dinistiq') {
    excludes = [ 'guicy/**' ]
  }
  if (tangram_backend == 'guicy') {
    excludes = [ 'dinistiq/**' ]
  }
}

war {
  archiveName = "${project.name}-${tangram_backend}.war"
  webXml = file("src/main/webapp/WEB-INF/web-${tangram_backend}.xml")
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  if (tangram_backend == 'spring') {
    excludes = [ 'classes/**', 'WEB-INF/web*.xml' ]
  } else {
    excludes = [ 'classes/**', 'WEB-INF/web*.xml', 'WEB-INF/tangram/**' ]
  }
}

stopPort = 12390
httpPort = 12380

// If you are still using eclipse, you might want to use these
// apply plugin: 'eclipse'
// Project specific default output directory
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
