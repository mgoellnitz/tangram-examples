/**
 * 
 * Copyright (C) 2011-2014 Martin Goellnitz
 * 
 * This work is licensed under the Creative Commons Attribution 3.0 
 * Unported License. To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to 
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, 
 * California, 94041, USA.
 * 
 */
defaultTasks 'clean', 'build'

def tangram_version = '0.9-SNAPSHOT'

// Switch to have the options in one example project - optional external override
def tangram_backend = project.hasProperty('backend') ? "$backend" : 'dinistiq' // spring or dinistiq

buildscript {
  repositories {
    mavenCentral()
    maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  }
  dependencies {
    classpath "tangram:gradle-plugin:0.9-SNAPSHOT"
  }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'tangram'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'
jar.enabled = true 

repositories {
  // most of the usual stuff
  mavenCentral()
  // the tangram snapshots
  maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  // the tangram releases
  maven { url "http://my-amor.appspot.com/repository" }
}

configurations {
  libs 
  webapp
  // this is only relevant for spring scenarios since spring still uses jcl
  all*.exclude module: 'commons-logging'
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:tangram-core:$tangram_version:war@war"  
  compile "tangram:tangram-ebean:$tangram_version"
  
  runtime "tangram:tangram-${tangram_backend}:$tangram_version"
  
  // turn on editor
  webapp "tangram:tangram-editor:$tangram_version:war@war"
  runtime "tangram:tangram-editor:$tangram_version"
  
  /* For the FTP Service
  runtime "tangram:tangram-ftp:$tangram_version"
   */
    
  /* Apache Shiro most likely to be used together with dinistiq */
  if (tangram_backend == 'dinistiq') {
    runtime "org.apache.shiro:shiro-core:$versions.shiro"
    runtime "org.apache.shiro:shiro-web:$versions.shiro"
    runtime "org.slf4j:jcl-over-slf4j:$versions.slf4j"
  }
  /* Spring security framework */
  if (tangram_backend == 'spring') {
    runtime "org.springframework.security:spring-security-config:$versions.springsecurity"
    runtime "org.springframework.security:spring-security-web:$versions.springsecurity"
  }
  
  runtime "com.h2database:h2:1.3.174"
  runtime "org.slf4j:slf4j-log4j12:$versions.slf4j"
  
  testCompile "junit:junit:$versions.junit"
  
  providedCompile "$versions.servlet_api"
  providedCompile "$versions.jsp_api"
}

compileJava.doLast { ebeanEnhance() }

jar {
  if (tangram_backend == 'spring') {
    excludes = [ "dinistiq/**" ]
  }
}

war.doFirst { overlayWebapp(war) }

war {
  archiveName = "${project.name}-${tangram_backend}.war"
  webXml = file("src/main/webapp/WEB-INF/web-${tangram_backend}.xml") 
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  if (tangram_backend == 'spring') {
    excludes = [ "classes/**", "WEB-INF/web*.xml", "WEB-INF/shiro.ini", "shiro/**" ]
  } else {
    excludes = [ "classes/**", "WEB-INF/web*.xml", "WEB-INF/tangram/**", "WEB-INF/security-*.xml" ]
  }
}

stopPort = 12390
httpPort = 12380

// If you are still using eclipse, you might want to use these
// apply plugin: 'eclipse'
// Project specific default output directory
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
