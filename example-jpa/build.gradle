/**
 * 
 * Copyright (C) 2011-2014 Martin Goellnitz
 * 
 * This work is licensed under the Creative Commons Attribution 3.0 
 * Unported License. To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to 
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, 
 * California, 94041, USA.
 * 
 */
defaultTasks 'clean', 'build'

ext.tangram_version = '0.9-SNAPSHOT'
ext.tangram_backend = 'spring' // spring or dinistiq
ext.jpa_backend = 'nucleus' // openjpa, eclipselink, or nucleus
ext.do_bytecode_transform = true; // JPA can optionally be used without except for datanucleus

buildscript {
  repositories {
    mavenCentral()
    maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  }
  dependencies {
    classpath "tangram:gradle-plugin:0.9-SNAPSHOT"
  }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'tangram'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'
jar.enabled = true 

repositories {
  // most of the usual stuff
  mavenCentral()
  // the tangram snapshots
  maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  // the tangram releases
  maven { url "http://my-amor.appspot.com/repository" }
}

configurations {
  libs 
  webapp
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:tangram-core:$tangram_version:war@war"
  
  /* JPA without byte-code transformed classes for any of the 
     implementations supporting this.
  compile "tangram:tangram-jpa:$tangram_version"
   */
  
  /* Enhanced OpenJPA
  compile "tangram:tangram-jpa:$tangram_version:openjpa"
  compile ("org.apache.openjpa:openjpa:$versions.openjpa") {
    exclude group: 'asm'
  }
   */
  
  /* Woven EclipseLink
  compile "tangram:tangram-jpa:$tangram_version:eclipselink"
  compile "org.eclipse.persistence:org.eclipse.persistence.jpa:$versions.eclipselink"
  compile "$versions.persistence_api"
   */
  
  /* For JPA with DataNucleus
  */
  compile ("tangram:tangram-jpa:$tangram_version:nucleus");
  compile "org.datanucleus:datanucleus-api-jpa:$versions.datanucleus"
  compile "org.datanucleus:datanucleus-core:$versions.datanucleus"
  compile "$versions.jdo_api"
  compile "$versions.persistence_api"
  runtime "org.datanucleus:datanucleus-rdbms:$versions.datanucleus"
  
  runtime "tangram:tangram-${tangram_backend}:$tangram_version"
  
  webapp "tangram:tangram-editor:$tangram_version:war@war"
  runtime "tangram:tangram-editor:$tangram_version"
  
  /* For the FTP Service
  runtime "tangram:tangram-ftp:$tangram_version"
   */
    
  /* Spring security framework
   */
  // this is more like a runtime dependency since we for now only use it by configuration
  runtime "org.springframework.security:spring-security-config:$versions.springsecurity"
  runtime "org.springframework.security:spring-security-web:$versions.springsecurity"

  /* Apache Shiro most likely to be used together with dinistiq
  runtime "org.apache.shiro:shiro-core:$versions.shiro"
  runtime "org.apache.shiro:shiro-web:$versions.shiro"
   */
  
  runtime "org.slf4j:slf4j-log4j12:$versions.slf4j"  
  runtime "log4j:log4j:$versions.log4j"  
  runtime "hsqldb:hsqldb:1.8.0.10"
 
  testCompile "junit:junit:$versions.junit"
  
  // your container will have this for you
  providedCompile "javax.servlet:servlet-api:$versions.servlet"
  providedCompile "javax.servlet:jsp-api:$versions.jsp"
}

jar.doFirst { 
  if (do_bytecode_transform) {
    // include this when using "OpenJPA enhanced" block in the dependencies
    if (jpa_backend.equals('openjpa')) openjpaEnhance()
    // include this when using "EclipseLInk woven" block in the dependencies
    if (jpa_backend.equals('eclipselink')) eclipselinkWeave() 
    // This is farily untested
    if (jpa_backend.equals('nucleus')) nucleusJpaEnhance() 
  }
}

war.doFirst {
  overlayWebapp(war) 
}

war {
  webXml = file("src/main/webapp/WEB-INF/web-${tangram_backend}.xml") 
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  excludes = [ "classes/**", "WEB-INF/web*.xml" ]
  // Use backend specific persistence.xml for JPA 
  // In this example use the same pesistence.xml which was used for enhancing or weaving
  String jpa_method = jpa_backend
  if (jpa_backend.equals('openjpa')) jpa_method='enhance'
  if (jpa_backend.equals('eclipselink')) jpa_method='weave' 
  into ('WEB-INF/classes') {
    from "$project.projectDir/$jpa_method"
  }
}

stopPort = 12390
httpPort = 12380

// If you are still using eclipse, you might want to use these
// apply plugin: 'eclipse'
// Project specific default output directory
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
