<?xml version="1.0" encoding="utf-8"?>
<!--

  Copyright (C) 2011-2015 Martin Goellnitz

  This work is licensed under the Creative Commons Attribution 3.0
  Unported License. To view a copy of this license, visit
  http://creativecommons.org/licenses/by/3.0/ or send a letter to
  Creative Commons, 444 Castro Street, Suite 900, Mountain View,
  California, 94041, USA.

-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

  <!--
       Tangram supports spring request interceptors. As a default we use a password interceptor
       for the security feature in core and a measure time interceptor for performance checks
  -->


  <util:set id="loginProviders" value-type="java.lang.String">
    <value>form</value>
    <value>basic</value>
    <value>yahoo</value>
  </util:set>

  <!-- to make the whole application login protected this will be the list of read capable persons
  <util:set id="allowedUsers" value-type="java.lang.String">
    <value>form:user</value>
  </util:set>
  -->

  <util:set id="adminUsers" value-type="java.lang.String">
    <value>form:admin</value>
  </util:set>

  <util:map id="usernamePasswordMapping" key-type="java.lang.String" value-type="java.lang.String">
    <entry key="user" value="04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb" />
    <entry key="admin" value="8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918" />
  </util:map>

  <!-- Example additional login client -->
  <bean id="yahooLogin" class="org.pac4j.openid.client.YahooOpenIdClient">
    <property name="name" value="yahoo"/>
  </bean>

  <bean id="jpaConfigOverrides" class="java.util.HashMap">
    <constructor-arg>
      <map>
        <!--
             hsqldb config example for DataNucleus. Content provided when run directly in the development environment.
        <entry key="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:hsqldb:file:datanucleus/hsqldb/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             h2sql config example for DataNucleus.
        <entry key="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:h2:./datanucleus/h2/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             DataNucleus config example. These should be added in any environment using DataNucleus
        -->
        <entry key="datanucleus.autoCreateSchema" value="true"/>
        <entry key="datanucleus.validateTables" value="true"/>
        <entry key="datanucleus.manageRelationships" value="true"/>
        <entry key="datanucleus.validateConstraints" value="true"/>

        <!--
             hsqldb config example for EclipseLink. Content provided when run directly in the development environment.

        <entry key="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:hsqldb:file:eclipselink/hsqldb/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             h2sql config example for EclipseLink.

        <entry key="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:h2:./eclipselink/h2/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             EclipseLink config example. These should be added in any environment using EclipseLink
               weaving: e.g. static or false
               ddl-generation: create-and-drop-tables or create-tables
        -->
        <entry key="eclipselink.ddl-generation" value="create-tables"/>
        <entry key="eclipselink.weaving" value="static"/>

        <!--
             hsqldb config example for Hibernate.

        <entry key="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:hsqldb:file:hibernate/hsqldb/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             h2sql config example for Hibernate.

        <entry key="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:h2:./hibernate/h2/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             Hibernate config example. These should be added in any environment using Hibernate.
        -->
        <entry key="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
        <!--
        <entry key="hibernate.hbm2ddl.auto" value="create-drop"/>
        -->

        <!--
             hsqldb config example for OpenJPA. Content provided when run directly in the development environment.
        -->
        <entry key="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:hsqldb:file:openjpa/hsqldb/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        <!--
             h2sql config example for OpenJPA.

        <entry key="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
        <entry key="javax.persistence.jdbc.url" value="jdbc:h2:./openjpa/h2/tangram"/>
        <entry key="javax.persistence.jdbc.user" value="sa"/>
        <entry key="javax.persistence.jdbc.password" value=""/>
        -->
        <!--
             OpenJPA config example. These should be added in any environment using OpenJPA
                openjpa.Log configures the OpenJPA way of logging - can configure file details or e.g. simply say "log4j"
                openjpa.RuntimeUnenhancedClasses can be set to "supported"
        -->
        <entry key="openjpa.Log" value="File=build/openjpa.log, DefaultLevel=WARN, Runtime=INFO, SQL=TRACE"/>
        <entry key="openjpa.RuntimeUnenhancedClasses" value="supported"/>
        <entry key="openjpa.jdbc.SynchronizeMappings" value="buildSchema"/>
      </map>
    </constructor-arg>
  </bean>

</beans>
