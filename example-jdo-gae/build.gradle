/**
 * 
 * Copyright (C) 2011-2014 Martin Goellnitz
 * 
 * This work is licensed under the Creative Commons Attribution 3.0 
 * Unported License. To view a copy of this license, visit 
 * http://creativecommons.org/licenses/by/3.0/ or send a letter to 
 * Creative Commons, 444 Castro Street, Suite 900, Mountain View, 
 * California, 94041, USA.
 * 
 */
defaultTasks 'clean', 'build'

def tangram_version = '0.9-SNAPSHOT'

// Switch to have the options in one example project - optional external override
def tangram_backend = project.hasProperty('backend') ? "$backend" : 'dinistiq' // spring or dinistiq

buildscript {
  repositories {
    mavenCentral()
    maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  }
  dependencies {
    classpath "tangram:gradle-plugin:0.9-SNAPSHOT"
  }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin: 'jetty'
apply plugin: 'tangram'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// don't let gradle work with its defaults on my files...
webAppDirName = 'disabled'
jar.enabled = true 

repositories {
  mavenLocal()
  // most of the usual stuff
  mavenCentral()
  // tangram snapshots
  maven { url "http://repository-tangram.forge.cloudbees.com/snapshot" }
  // the tangram stuff
  maven { url "http://my-amor.appspot.com/repository" }
}

configurations {
  libs 
  webapp
  // this is only relevant for spring scenarios since spring still uses jcl
  all*.exclude module: 'commons-logging'
}

artifacts {
  archives war
  libs jar
}

dependencies {
  webapp "tangram:tangram-gae:$tangram_version:war@war"
  compile "tangram:tangram-gae:$tangram_version"
  runtime "tangram:tangram-$tangram_backend:$tangram_version"
  runtime "org.slf4j:slf4j-jdk14:$versions.slf4j"  
  
  providedCompile "javax.servlet:servlet-api:$versions.servlet"
  providedCompile "javax.servlet:jsp-api:$versions.jsp"
  
  testCompile "junit:junit:$versions.junit"
}

clean.doFirst {
  copy {
    from "$buildDir/war/WEB-INF/appengine-generated"
    into 'local-db'
    include '**/**'
  }
}

compileJava.doLast { nucleusJdoEnhance() }

war.doFirst { overlayWebapp(war) }

war {
  archiveName = "${project.name}-${tangram_backend}.war"
  webXml = file("src/main/webapp/WEB-INF/web-${tangram_backend}.xml") 
  classpath = jar.outputs.files + configurations.runtime - configurations.providedRuntime
  excludes = [ "classes/**", "WEB-INF/web*.xml" ]
}

// to use the local dev_appserver in this directory and to copy the db files back and forth
war.doLast {
  ant.unzip(src: war.archivePath, dest: "$buildDir/war")
  copy {
    from 'local-db'
    into "$buildDir/war/WEB-INF/appengine-generated"
    include '**/**'
  }
}

task appserverRun (type :Exec) {
  if (System.properties['os.name'].toLowerCase().contains('windows')) {
    commandLine 'cmd', '/c', 'dev_appserver --jvm_flag=-Ddatastore.default_high_rep_job_policy_unapplied_job_pct=1 --disable_update_check -p 12380 build\\war'
  } else {
    commandLine 'bash', '-c', 'dev_appserver.sh --jvm_flag=-Ddatastore.default_high_rep_job_policy_unapplied_job_pct=1 --disable_update_check -p 12380 build/war'
  } // if
}

// For the users of a the legacy IDE Eclipse
// apply plugin: 'eclipse'
// Project specific default output directory
// eclipse.classpath.conventionMapping.defaultOutputDir = { new File(project.projectDir, 'build/classes/main') }
